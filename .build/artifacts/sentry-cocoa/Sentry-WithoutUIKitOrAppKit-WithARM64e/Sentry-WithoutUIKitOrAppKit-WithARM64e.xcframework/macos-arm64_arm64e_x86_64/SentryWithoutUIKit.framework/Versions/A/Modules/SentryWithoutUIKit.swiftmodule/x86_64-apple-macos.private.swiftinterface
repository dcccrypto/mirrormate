// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-macos10.13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name SentryWithoutUIKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppKit
import CoreGraphics
import Darwin
import Foundation
import MachO
import MetricKit
import ObjectiveC
@_exported import SentryWithoutUIKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import ObjectiveC.runtime
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class SentryURLRequestFactory : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func envelopeRequest(with dsn: SentryWithoutUIKit.SentryDsn, data: Foundation.Data) throws -> Foundation.URLRequest
  @_spi(Private) @objc public static func envelopeRequest(with url: Foundation.URL, data: Foundation.Data, authHeader: Swift.String?) throws -> Foundation.URLRequest
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class SentryExtraPackages : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func addPackageName(_ name: Swift.String?, version: Swift.String?)
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class SentrySerializationSwift : ObjectiveC.NSObject {
  @_spi(Private) @objc(sessionWithData:) public static func session(with data: Foundation.Data) -> SentryWithoutUIKit.SentrySession?
  @_spi(Private) @objc(appStateWithData:) public static func appState(with data: Foundation.Data) -> SentryWithoutUIKit.SentryAppState?
  @_spi(Private) @objc(dataWithJSONObject:) public static func data(withJSONObject jsonObject: Any) -> Foundation.Data?
  @_spi(Private) @objc(dataWithEnvelope:) public static func data(with envelope: SentryWithoutUIKit.SentryEnvelope) -> Foundation.Data?
  @_spi(Private) @objc(dataWithSession:) public static func data(with session: SentryWithoutUIKit.SentrySession) -> Foundation.Data?
  @_spi(Private) @objc(envelopeWithData:) public static func envelope(with data: Foundation.Data) -> SentryWithoutUIKit.SentryEnvelope?
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc public enum SentryReplayType : Swift.Int {
  @_spi(Private) case session
  @_spi(Private) case buffer
  @_spi(Private) public init?(rawValue: Swift.Int)
  @_spi(Private) public typealias RawValue = Swift.Int
  @_spi(Private) public var rawValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) extension SentryWithoutUIKit.SentryReplayType : Swift.CustomStringConvertible {
  @_spi(Private) public var description: Swift.String {
    @_spi(Private) get
  }
}
@_spi(Private) @objc(SentryRRWebEvent) public protocol SentryRRWebEventProtocol : SentryWithoutUIKit.SentrySerializable {
}
@_spi(Private) @objc @_hasMissingDesignatedInitializers @objcMembers public class SentryRRWebEvent : ObjectiveC.NSObject, SentryWithoutUIKit.SentryRRWebEventProtocol {
  @_spi(Private) @objc final public let data: [Swift.String : Any]?
  @_spi(Private) @objc public func serialize() -> [Swift.String : Any]
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @_hasMissingDesignatedInitializers final public class SentryRRWebBreadcrumbEvent : SentryWithoutUIKit.SentryRRWebCustomEvent {
  @_spi(Private) @objc public init(timestamp: Foundation.Date, category: Swift.String, message: Swift.String? = nil, level: SentryWithoutUIKit.SentryLevel = .none, data: [Swift.String : Any]? = nil)
  @_spi(Private) @objc deinit
}
extension SentryWithoutUIKit.User : Swift.Decodable {
  @available(*, deprecated)
  required convenience public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class SentrySdkPackage : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func global() -> [Swift.String : Swift.String]?
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @_hasMissingDesignatedInitializers @objc public class SentryRRWebSpanEvent : SentryWithoutUIKit.SentryRRWebCustomEvent {
  @_spi(Private) @objc public init(timestamp: Foundation.Date, endTimestamp: Foundation.Date, operation: Swift.String, description: Swift.String, data: [Swift.String : Any])
  @_spi(Private) @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SentryViewScreenshotOptions : ObjectiveC.NSObject, SentryWithoutUIKit.SentryRedactOptions {
  @_hasMissingDesignatedInitializers public class DefaultValues {
    public static let enableViewRendererV2: Swift.Bool
    public static let enableFastViewRendering: Swift.Bool
    public static let maskAllText: Swift.Bool
    public static let maskAllImages: Swift.Bool
    public static let maskedViewClasses: [Swift.AnyClass]
    public static let unmaskedViewClasses: [Swift.AnyClass]
    @objc deinit
  }
  @objc public var enableViewRendererV2: Swift.Bool
  @objc public var enableFastViewRendering: Swift.Bool
  @objc public var maskAllImages: Swift.Bool
  @objc public var maskAllText: Swift.Bool
  @objc public var maskedViewClasses: [Swift.AnyClass]
  @objc public var unmaskedViewClasses: [Swift.AnyClass]
  @objc convenience override dynamic public init()
  @objc public init(enableViewRendererV2: Swift.Bool = DefaultValues.enableViewRendererV2, enableFastViewRendering: Swift.Bool = DefaultValues.enableFastViewRendering, maskAllText: Swift.Bool = DefaultValues.maskAllText, maskAllImages: Swift.Bool = DefaultValues.maskAllImages, maskedViewClasses: [Swift.AnyClass] = DefaultValues.maskedViewClasses, unmaskedViewClasses: [Swift.AnyClass] = DefaultValues.unmaskedViewClasses)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_spi(Private) @objc final public class SentrySdkInfo : ObjectiveC.NSObject, SentryWithoutUIKit.SentrySerializable {
  @_spi(Private) @available(*, deprecated, message: "This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")
  @objc public static func global() -> Self
  @_spi(Private) @objc final public let name: Swift.String
  @_spi(Private) @objc final public let version: Swift.String
  @_spi(Private) @objc final public let integrations: [Swift.String]
  @_spi(Private) @objc final public let features: [Swift.String]
  @_spi(Private) @objc final public let packages: [[Swift.String : Swift.String]]
  @_spi(Private) @objc final public let settings: SentryWithoutUIKit.SentrySDKSettings
  @_spi(Private) @available(*, deprecated, message: "This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")
  @objc convenience public init(withOptions options: SentryWithoutUIKit.Options?)
  @_spi(Private) @objc public init(name: Swift.String?, version: Swift.String?, integrations: [Swift.String]?, features: [Swift.String]?, packages: [[Swift.String : Swift.String]]?, settings: SentryWithoutUIKit.SentrySDKSettings)
  @_spi(Private) @objc convenience public init(dict: [Swift.AnyHashable : Any])
  @_spi(Private) @objc final public func serialize() -> [Swift.String : Any]
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc final public class SentryEnvelope : ObjectiveC.NSObject {
  @_spi(Private) @available(*, deprecated, message: "This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")
  @objc(initWithId:singleItem:) convenience public init(id: SentryWithoutUIKit.SentryId?, singleItem item: SentryWithoutUIKit.SentryEnvelopeItem)
  @_spi(Private) @objc(initWithHeader:singleItem:) convenience public init(header: SentryWithoutUIKit.SentryEnvelopeHeader, singleItem item: SentryWithoutUIKit.SentryEnvelopeItem)
  @_spi(Private) @available(*, deprecated, message: "This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")
  @objc(initWithId:items:) convenience public init(id: SentryWithoutUIKit.SentryId?, items: [SentryWithoutUIKit.SentryEnvelopeItem])
  @_spi(Private) @objc(initWithHeader:items:) public init(header: SentryWithoutUIKit.SentryEnvelopeHeader, items: [SentryWithoutUIKit.SentryEnvelopeItem])
  @_spi(Private) @objc final public let header: SentryWithoutUIKit.SentryEnvelopeHeader
  @_spi(Private) @objc final public let items: [SentryWithoutUIKit.SentryEnvelopeItem]
  @_spi(Private) @objc deinit
}
@objc @objcMembers public class SentryFeedback : ObjectiveC.NSObject {
  @objc public enum SentryFeedbackSource : Swift.Int {
    public var serialize: Swift.String {
      get
    }
    case widget
    case custom
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_spi(Private) @objc final public let eventId: SentryWithoutUIKit.SentryId
  @objc public init(message: Swift.String, name: Swift.String?, email: Swift.String?, source: SentryWithoutUIKit.SentryFeedback.SentryFeedbackSource = .widget, associatedEventId: SentryWithoutUIKit.SentryId? = nil, attachments: [Foundation.Data]? = nil)
  @objc deinit
}
extension SentryWithoutUIKit.SentryFeedback : SentryWithoutUIKit.SentrySerializable {
}
extension SentryWithoutUIKit.SentryFeedback {
  @objc dynamic public func serialize() -> [Swift.String : Any]
}
extension SentryWithoutUIKit.SentryFeedback {
  @_spi(Private) @objc dynamic public func attachmentsForEnvelope() -> [SentryWithoutUIKit.Attachment]
}
@objc(SentryEventDecodable) open class SentryEventDecodable : SentryWithoutUIKit.Event, Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
  @objc required dynamic public init()
  @objc deinit
}
@available(*, deprecated, message: "Use SentryFeedback.")
@objc(SentryUserFeedback) open class UserFeedback : ObjectiveC.NSObject, SentryWithoutUIKit.SentrySerializable {
  @objc open var eventId: SentryWithoutUIKit.SentryId {
    get
  }
  @objc open var name: Swift.String
  @objc open var email: Swift.String
  @objc open var comments: Swift.String
  @objc public init(eventId: SentryWithoutUIKit.SentryId)
  @objc open func serialize() -> [Swift.String : Any]
  @objc deinit
}
public struct SentryLogMessage : Swift.ExpressibleByStringInterpolation {
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: SentryWithoutUIKit.SentryLogMessage.StringInterpolation)
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation(_ value: @autoclosure @escaping () -> Swift.String)
    public mutating func appendInterpolation(_ value: @autoclosure @escaping () -> Swift.Bool)
    public mutating func appendInterpolation(_ value: @autoclosure @escaping () -> Swift.Int)
    public mutating func appendInterpolation(_ value: @autoclosure @escaping () -> Swift.Double)
    public mutating func appendInterpolation(_ value: @autoclosure @escaping () -> Swift.Float)
    public mutating func appendInterpolation<T>(_ value: @autoclosure @escaping () -> T) where T : Swift.CustomStringConvertible
    public typealias StringLiteralType = Swift.String
  }
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SentryWithoutUIKit.Frame : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension SentryWithoutUIKit.SentryThread : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension SentryWithoutUIKit.Geo : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc @objcMembers final public class SentryLog : ObjectiveC.NSObject {
  @objc final public var timestamp: Foundation.Date
  @objc final public var traceId: SentryWithoutUIKit.SentryId
  @objc final public var level: SentryWithoutUIKit.SentryLog.Level
  @objc final public var body: Swift.String
  @objc final public var attributes: [Swift.String : SentryWithoutUIKit.SentryLog.Attribute]
  @objc final public var severityNumber: Foundation.NSNumber?
  @objc deinit
}
@_spi(Private) extension SentryWithoutUIKit.SentryLog : Swift.Codable {
  @_spi(Private) convenience public init(from decoder: any Swift.Decoder) throws
  @_spi(Private) final public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(Private) @objc public protocol SentryInfoPlistWrapperProvider {
  @_spi(Private) @objc func getAppValueString(for key: Swift.String) throws -> Swift.String
  @_spi(Private) @objc func getAppValueBoolean(for key: Swift.String, errorPtr: Foundation.NSErrorPointer) -> Swift.Bool
}
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class SentrySDKSettings : ObjectiveC.NSObject {
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc public init(options: SentryWithoutUIKit.Options?)
  @_spi(Private) @objc public init(dict: Foundation.NSDictionary)
  @_spi(Private) @objc final public var autoInferIP: Swift.Bool
  @_spi(Private) @objc final public func serialize() -> Foundation.NSDictionary
  @_spi(Private) @objc deinit
}
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class LoadValidator : ObjectiveC.NSObject {
  @_spi(Private) @objc final public class func checkForDuplicatedSDK(imageName: Swift.String, imageAddress: Foundation.NSNumber, imageSize: Foundation.NSNumber, objcRuntimeWrapper: any SentryWithoutUIKit.SentryObjCRuntimeWrapper, dispatchQueueWrapper: SentryWithoutUIKit.SentryDispatchQueueWrapper)
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @_hasMissingDesignatedInitializers @objc public class SentryReplayRecording : ObjectiveC.NSObject {
  @_spi(Private) @objc convenience public init(segmentId: Swift.Int, video: SentryWithoutUIKit.SentryVideoInfo, extraEvents: [any SentryWithoutUIKit.SentryRRWebEventProtocol])
  @_spi(Private) @objc deinit
}
extension Foundation.FileManager {
  public func createFileWithSentryTracing(atPath path: Swift.String, contents data: Foundation.Data?, attributes attr: [Foundation.FileAttributeKey : Any]? = nil) -> Swift.Bool
  public func removeItemWithSentryTracing(at url: Foundation.URL) throws
  public func removeItemWithSentryTracing(atPath path: Swift.String) throws
  public func copyItemWithSentryTracing(at srcURL: Foundation.URL, to dstURL: Foundation.URL) throws
  public func copyItemWithSentryTracing(atPath srcPath: Swift.String, toPath dstPath: Swift.String) throws
  public func moveItemWithSentryTracing(at srcURL: Foundation.URL, to dstURL: Foundation.URL) throws
  public func moveItemWithSentryTracing(atPath srcPath: Swift.String, toPath dstPath: Swift.String) throws
}
@_spi(Private) @objc @_inheritsConvenienceInitializers final public class SentryFrameRemover : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func removeNonSdkFrames(_ frames: [SentryWithoutUIKit.Frame]) -> [SentryWithoutUIKit.Frame]
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @_inheritsConvenienceInitializers @objc public class SentrySDKLogSupport : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func configure(_ isDebug: Swift.Bool, diagnosticLevel: SentryWithoutUIKit.SentryLevel)
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc final public class SentryClientReport : ObjectiveC.NSObject, SentryWithoutUIKit.SentrySerializable {
  @_spi(Private) @objc(initWithDiscardedEvents:dateProvider:) public init(discardedEvents: [SentryWithoutUIKit.SentryDiscardedEvent], dateProvider: any SentryWithoutUIKit.SentryCurrentDateProvider)
  @_spi(Private) @objc final public func serialize() -> [Swift.String : Any]
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc public class SentrySessionReplayEnvironmentChecker : ObjectiveC.NSObject, SentryWithoutUIKit.SentrySessionReplayEnvironmentCheckerProvider {
  @_spi(Private) @objc public init(infoPlistWrapper: any SentryWithoutUIKit.SentryInfoPlistWrapperProvider)
  @_spi(Private) @objc public func isReliable() -> Swift.Bool
  @_spi(Private) @objc deinit
}
@objc final public class SentryLogger : ObjectiveC.NSObject {
  @_spi(Private) public init(hub: SentryWithoutUIKit.SentryHub, dateProvider: any SentryWithoutUIKit.SentryCurrentDateProvider, batcher: SentryWithoutUIKit.SentryLogBatcher?)
  final public func trace(_ message: SentryWithoutUIKit.SentryLogMessage, attributes: [Swift.String : Any] = [:])
  @objc(trace:) final public func trace(_ body: Swift.String)
  @objc(trace:attributes:) final public func trace(_ body: Swift.String, attributes: [Swift.String : Any])
  final public func debug(_ message: SentryWithoutUIKit.SentryLogMessage, attributes: [Swift.String : Any] = [:])
  @objc(debug:) final public func debug(_ body: Swift.String)
  @objc(debug:attributes:) final public func debug(_ body: Swift.String, attributes: [Swift.String : Any])
  final public func info(_ message: SentryWithoutUIKit.SentryLogMessage, attributes: [Swift.String : Any] = [:])
  @objc(info:) final public func info(_ body: Swift.String)
  @objc(info:attributes:) final public func info(_ body: Swift.String, attributes: [Swift.String : Any])
  final public func warn(_ message: SentryWithoutUIKit.SentryLogMessage, attributes: [Swift.String : Any] = [:])
  @objc(warn:) final public func warn(_ body: Swift.String)
  @objc(warn:attributes:) final public func warn(_ body: Swift.String, attributes: [Swift.String : Any])
  final public func error(_ message: SentryWithoutUIKit.SentryLogMessage, attributes: [Swift.String : Any] = [:])
  @objc(error:) final public func error(_ body: Swift.String)
  @objc(error:attributes:) final public func error(_ body: Swift.String, attributes: [Swift.String : Any])
  final public func fatal(_ message: SentryWithoutUIKit.SentryLogMessage, attributes: [Swift.String : Any] = [:])
  @objc(fatal:) final public func fatal(_ body: Swift.String)
  @objc(fatal:attributes:) final public func fatal(_ body: Swift.String, attributes: [Swift.String : Any])
  @objc deinit
}
@_spi(Private) @objc public protocol SentryProcessInfoSource {
  @_spi(Private) @objc var processDirectoryPath: Swift.String { get }
  @_spi(Private) @objc var processPath: Swift.String? { get }
  @_spi(Private) @objc var processorCount: Swift.Int { get }
  @_spi(Private) @objc var thermalState: Foundation.ProcessInfo.ThermalState { get }
  @_spi(Private) @objc var environment: [Swift.String : Swift.String] { get }
  @_spi(Private) @objc @available(iOS 14.0, macOS 11.0, watchOS 7.0, tvOS 14.0, *)
  var isiOSAppOnMac: Swift.Bool { get }
  @_spi(Private) @objc @available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 13.0, *)
  var isMacCatalystApp: Swift.Bool { get }
}
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class PlaceholderProcessInfoClass : ObjectiveC.NSObject {
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) extension Foundation.ProcessInfo : SentryWithoutUIKit.SentryProcessInfoSource {
  @_spi(Private) @objc dynamic public var processDirectoryPath: Swift.String {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc dynamic public var processPath: Swift.String? {
    @_spi(Private) @objc get
  }
}
@_spi(Private) @objc @_hasMissingDesignatedInitializers @objcMembers public class SentryVideoInfo : ObjectiveC.NSObject {
  @_spi(Private) @objc final public let path: Foundation.URL
  @_spi(Private) @objc final public let start: Foundation.Date
  @_spi(Private) @objc final public let end: Foundation.Date
  @_spi(Private) @objc deinit
}
extension SentryWithoutUIKit.MechanismMeta : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension SentryWithoutUIKit.SentryStacktrace : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension SentryWithoutUIKit.Breadcrumb : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @_inheritsConvenienceInitializers @objc public class SentryInfoPlistWrapper : ObjectiveC.NSObject, SentryWithoutUIKit.SentryInfoPlistWrapperProvider {
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) public init(bundle: Foundation.Bundle)
  @_spi(Private) @objc public func getAppValueBoolean(for key: Swift.String, errorPtr errPtr: Foundation.NSErrorPointer) -> Swift.Bool
  @_spi(Private) @objc public func getAppValueString(for key: Swift.String) throws -> Swift.String
  @_spi(Private) @objc deinit
}
@_spi(Private) @_inheritsConvenienceInitializers @objc public class SentryThreadWrapper : ObjectiveC.NSObject {
  @_spi(Private) @objc public func sleep(forTimeInterval timeInterval: Foundation.TimeInterval)
  @_spi(Private) @objc public func threadStarted(_ threadID: Foundation.UUID)
  @_spi(Private) @objc public func threadFinished(_ threadID: Foundation.UUID)
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc public protocol SentryFileManagerProtocol {
  @_spi(Private) @objc func moveState(_ stateFilePath: Swift.String, toPreviousState previousStateFilePath: Swift.String)
  @_spi(Private) @objc func readData(fromPath path: Swift.String) throws -> Foundation.Data
  @_spi(Private) @discardableResult
  @objc(writeData:toPath:) func write(_ data: Foundation.Data, toPath path: Swift.String) -> Swift.Bool
  @_spi(Private) @objc func removeFile(atPath path: Swift.String)
  @_spi(Private) @objc func getSentryPathAsURL() -> Foundation.URL
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SentryReplayOptions : ObjectiveC.NSObject, SentryWithoutUIKit.SentryRedactOptions {
  @_hasMissingDesignatedInitializers public class DefaultValues {
    public static let sessionSampleRate: Swift.Float
    public static let onErrorSampleRate: Swift.Float
    public static let maskAllText: Swift.Bool
    public static let maskAllImages: Swift.Bool
    public static let enableViewRendererV2: Swift.Bool
    public static let enableFastViewRendering: Swift.Bool
    public static let quality: SentryWithoutUIKit.SentryReplayOptions.SentryReplayQuality
    public static let maskedViewClasses: [Swift.AnyClass]
    public static let unmaskedViewClasses: [Swift.AnyClass]
    @objc deinit
  }
  @objc public enum SentryReplayQuality : Swift.Int, Swift.CustomStringConvertible {
    case low
    case medium
    case high
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var sessionSampleRate: Swift.Float
  @objc public var onErrorSampleRate: Swift.Float
  @objc public var maskAllText: Swift.Bool
  @objc public var maskAllImages: Swift.Bool
  @objc public var quality: SentryWithoutUIKit.SentryReplayOptions.SentryReplayQuality
  @objc public var maskedViewClasses: [Swift.AnyClass]
  @objc public var unmaskedViewClasses: [Swift.AnyClass]
  @objc @available(*, deprecated, renamed: "enableViewRendererV2")
  public var enableExperimentalViewRenderer: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var enableViewRendererV2: Swift.Bool
  @objc public var enableFastViewRendering: Swift.Bool
  @_spi(Private) @objc public var replayBitRate: Swift.Int {
    @objc get
  }
  @_spi(Private) @objc public var sizeScale: Swift.Float {
    @objc get
  }
  @_spi(Private) @objc public var frameRate: Swift.UInt {
    @objc get
    @objc set
  }
  @_spi(Private) @objc public var errorReplayDuration: Foundation.TimeInterval
  @_spi(Private) @objc public var sessionSegmentDuration: Foundation.TimeInterval
  @_spi(Private) @objc public var maximumDuration: Foundation.TimeInterval
  @objc convenience override dynamic public init()
  @_spi(Private) @objc convenience public init(dictionary: [Swift.String : Any])
  @objc convenience public init(sessionSampleRate: Swift.Float = DefaultValues.sessionSampleRate, onErrorSampleRate: Swift.Float = DefaultValues.onErrorSampleRate, maskAllText: Swift.Bool = DefaultValues.maskAllText, maskAllImages: Swift.Bool = DefaultValues.maskAllImages, enableViewRendererV2: Swift.Bool = DefaultValues.enableViewRendererV2, enableFastViewRendering: Swift.Bool = DefaultValues.enableFastViewRendering)
  @objc deinit
}
extension SentryWithoutUIKit.Mechanism : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension SentryWithoutUIKit.SentryMessage : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SentryEventDecoder : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func decodeEvent(jsonData: Foundation.Data) -> SentryWithoutUIKit.Event?
  @objc override dynamic public init()
  @objc deinit
}
@_spi(Private) @objc final public class SentryCrashWrapper : ObjectiveC.NSObject {
  @_spi(Private) @objc final public var systemInfo: [Swift.String : Any] {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public init(processInfoWrapper: any SentryWithoutUIKit.SentryProcessInfoSource)
  @_spi(Private) @objc deinit
}
@_spi(Private) extension SentryWithoutUIKit.SentryCrashWrapper {
  @_spi(Private) @objc final public func startBinaryImageCache()
  @_spi(Private) @objc final public func stopBinaryImageCache()
  @_spi(Private) @objc final public var crashedLastLaunch: Swift.Bool {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc final public var durationFromCrashStateInitToLastCrash: Foundation.TimeInterval {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc final public var activeDurationSinceLastCrash: Foundation.TimeInterval {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc final public var isBeingTraced: Swift.Bool {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc final public var isSimulatorBuild: Swift.Bool {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc final public var isApplicationInForeground: Swift.Bool {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc final public var freeMemorySize: Swift.UInt64 {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc final public var appMemorySize: Swift.UInt64 {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc final public func enrichScope(_ scope: SentryWithoutUIKit.Scope)
}
@_spi(Private) @objc public protocol SentryCurrentDateProvider {
  @_spi(Private) @objc func date() -> Foundation.Date
  @_spi(Private) @objc func timezoneOffset() -> Swift.Int
  @_spi(Private) @objc func systemTime() -> Swift.UInt64
  @_spi(Private) @objc func systemUptime() -> Foundation.TimeInterval
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers public class SentryDefaultCurrentDateProvider : ObjectiveC.NSObject, SentryWithoutUIKit.SentryCurrentDateProvider {
  @_spi(Private) @objc public func date() -> Foundation.Date
  @_spi(Private) @objc public func timezoneOffset() -> Swift.Int
  @_spi(Private) @objc public func systemTime() -> Swift.UInt64
  @_spi(Private) @objc public func systemUptime() -> Foundation.TimeInterval
  @_spi(Private) @objc public static func getAbsoluteTime() -> Swift.UInt64
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SentryProfileOptions : ObjectiveC.NSObject {
  @objc public enum SentryProfileLifecycle : Swift.Int {
    case manual
    case trace
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var lifecycle: SentryWithoutUIKit.SentryProfileOptions.SentryProfileLifecycle
  @objc public var sessionSampleRate: Swift.Float
  @objc public var profileAppStarts: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers public class HTTPHeaderSanitizer : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func sanitizeHeaders(_ headers: [Swift.String : Swift.String]) -> [Swift.String : Swift.String]
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc public class SentryInAppLogic : ObjectiveC.NSObject {
  @_spi(Private) @objc final public let inAppIncludes: [Swift.String]
  @_spi(Private) @objc(initWithInAppIncludes:inAppExcludes:) public init(inAppIncludes: [Swift.String], inAppExcludes: [Swift.String])
  @_spi(Private) @objc public func `is`(inApp imagePath: Swift.String?) -> Swift.Bool
  @_spi(Private) @objc public func isClassInApp(_ targetClass: Swift.AnyClass) -> Swift.Bool
  @_spi(Private) @objc public static func isImageNameInApp(_ imageName: Swift.String, inAppInclude: Swift.String) -> Swift.Bool
  @_spi(Private) @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class SentryId : ObjectiveC.NSObject, Swift.Sendable {
  @objc public static let empty: SentryWithoutUIKit.SentryId
  @objc final public var sentryIdString: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc public init(uuid: Foundation.UUID)
  @objc(initWithUUIDString:) public init(uuidString: Swift.String)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@_spi(Private) @objc @objcMembers public class SentryFramesDelayResult : ObjectiveC.NSObject {
  @_spi(Private) @objc final public let delayDuration: CoreFoundation.CFTimeInterval
  @_spi(Private) @objc final public let framesContributingToDelayCount: Swift.UInt
  @_spi(Private) @objc public init(delayDuration: CoreFoundation.CFTimeInterval, framesContributingToDelayCount: Swift.UInt)
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc public protocol SentryANRTracker {
  @_spi(Private) @objc(addListener:) func add(listener: any SentryWithoutUIKit.SentryANRTrackerDelegate)
  @_spi(Private) @objc(removeListener:) func remove(listener: any SentryWithoutUIKit.SentryANRTrackerDelegate)
  @_spi(Private) @objc func clear()
}
@_spi(Private) @objc public protocol SentryANRTrackerDelegate {
  @_spi(Private) @objc func anrDetected(type: SentryWithoutUIKit.SentryANRType)
  @_spi(Private) @objc func anrStopped(result: SentryWithoutUIKit.SentryANRStoppedResult?)
}
@_spi(Private) @objc @objcMembers public class SentryANRStoppedResult : ObjectiveC.NSObject {
  @_spi(Private) @objc final public let minDuration: Foundation.TimeInterval
  @_spi(Private) @objc final public let maxDuration: Foundation.TimeInterval
  @_spi(Private) @objc public init(minDuration: Foundation.TimeInterval, maxDuration: Foundation.TimeInterval)
  @_spi(Private) @objc deinit
}
@_inheritsConvenienceInitializers @objc open class SentrySDK : ObjectiveC.NSObject {
  @objc public static var span: (any SentryWithoutUIKit.Span)? {
    @objc get
  }
  @objc public static var isEnabled: Swift.Bool {
    @objc get
  }
  @objc public static var logger: SentryWithoutUIKit.SentryLogger {
    @objc get
  }
  @objc public static func start(options: SentryWithoutUIKit.Options)
  @objc public static func start(configureOptions: @escaping (SentryWithoutUIKit.Options) -> Swift.Void)
  @discardableResult
  @objc(captureEvent:) public static func capture(event: SentryWithoutUIKit.Event) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc(captureEvent:withScope:) public static func capture(event: SentryWithoutUIKit.Event, scope: SentryWithoutUIKit.Scope) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc(captureEvent:withScopeBlock:) public static func capture(event: SentryWithoutUIKit.Event, block: @escaping (SentryWithoutUIKit.Scope) -> Swift.Void) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc public static func startTransaction(name: Swift.String, operation: Swift.String) -> any SentryWithoutUIKit.Span
  @discardableResult
  @objc public static func startTransaction(name: Swift.String, operation: Swift.String, bindToScope: Swift.Bool) -> any SentryWithoutUIKit.Span
  @discardableResult
  @objc(startTransactionWithContext:) public static func startTransaction(transactionContext: SentryWithoutUIKit.TransactionContext) -> any SentryWithoutUIKit.Span
  @discardableResult
  @objc(startTransactionWithContext:bindToScope:) public static func startTransaction(transactionContext: SentryWithoutUIKit.TransactionContext, bindToScope: Swift.Bool) -> any SentryWithoutUIKit.Span
  @discardableResult
  @objc(startTransactionWithContext:bindToScope:customSamplingContext:) public static func startTransaction(transactionContext: SentryWithoutUIKit.TransactionContext, bindToScope: Swift.Bool, customSamplingContext: [Swift.String : Any]) -> any SentryWithoutUIKit.Span
  @discardableResult
  @objc(startTransactionWithContext:customSamplingContext:) public static func startTransaction(transactionContext: SentryWithoutUIKit.TransactionContext, customSamplingContext: [Swift.String : Any]) -> any SentryWithoutUIKit.Span
  @discardableResult
  @objc(captureError:) public static func capture(error: any Swift.Error) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc(captureError:withScope:) public static func capture(error: any Swift.Error, scope: SentryWithoutUIKit.Scope) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc(captureError:withScopeBlock:) public static func capture(error: any Swift.Error, block: @escaping (SentryWithoutUIKit.Scope) -> Swift.Void) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc(captureException:) public static func capture(exception: Foundation.NSException) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc(captureException:withScope:) public static func capture(exception: Foundation.NSException, scope: SentryWithoutUIKit.Scope) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc(captureException:withScopeBlock:) public static func capture(exception: Foundation.NSException, block: @escaping (SentryWithoutUIKit.Scope) -> Swift.Void) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc(captureMessage:) public static func capture(message: Swift.String) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc(captureMessage:withScope:) public static func capture(message: Swift.String, scope: SentryWithoutUIKit.Scope) -> SentryWithoutUIKit.SentryId
  @discardableResult
  @objc(captureMessage:withScopeBlock:) public static func capture(message: Swift.String, block: @escaping (SentryWithoutUIKit.Scope) -> Swift.Void) -> SentryWithoutUIKit.SentryId
  @available(*, deprecated, message: "Use SentrySDK.back or use or configure our new managed UX with SentryOptions.configureUserFeedback.")
  @objc(captureUserFeedback:) public static func capture(userFeedback: SentryWithoutUIKit.UserFeedback)
  @objc(captureFeedback:) public static func capture(feedback: SentryWithoutUIKit.SentryFeedback)
  @objc(addBreadcrumb:) public static func addBreadcrumb(_ crumb: SentryWithoutUIKit.Breadcrumb)
  @objc(configureScope:) public static func configureScope(_ callback: @escaping (SentryWithoutUIKit.Scope) -> Swift.Void)
  @objc public static var crashedLastRun: Swift.Bool {
    @objc get
  }
  @objc public static var detectedStartUpCrash: Swift.Bool {
    @objc get
  }
  @objc public static func setUser(_ user: SentryWithoutUIKit.User?)
  @objc public static func startSession()
  @objc public static func endSession()
  @objc public static func crash()
  @objc public static func reportFullyDisplayed()
  @objc public static func pauseAppHangTracking()
  @objc public static func resumeAppHangTracking()
  @objc(flush:) public static func flush(timeout: Foundation.TimeInterval)
  @objc public static func close()
  @objc public static func startProfiler()
  @objc public static func stopProfiler()
  @_spi(Private) @objc public static func clearLogger()
  @objc override dynamic public init()
  @objc deinit
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@objc public protocol SentryMXManagerDelegate {
  @_spi(Private) @objc func didReceiveCrashDiagnostic(_ diagnostic: MetricKit.MXCrashDiagnostic, callStackTree: SentryWithoutUIKit.SentryMXCallStackTree, timeStampBegin: Foundation.Date, timeStampEnd: Foundation.Date)
  @_spi(Private) @objc func didReceiveDiskWriteExceptionDiagnostic(_ diagnostic: MetricKit.MXDiskWriteExceptionDiagnostic, callStackTree: SentryWithoutUIKit.SentryMXCallStackTree, timeStampBegin: Foundation.Date, timeStampEnd: Foundation.Date)
  @_spi(Private) @objc func didReceiveCpuExceptionDiagnostic(_ diagnostic: MetricKit.MXCPUExceptionDiagnostic, callStackTree: SentryWithoutUIKit.SentryMXCallStackTree, timeStampBegin: Foundation.Date, timeStampEnd: Foundation.Date)
  @_spi(Private) @objc func didReceiveHangDiagnostic(_ diagnostic: MetricKit.MXHangDiagnostic, callStackTree: SentryWithoutUIKit.SentryMXCallStackTree, timeStampBegin: Foundation.Date, timeStampEnd: Foundation.Date)
}
@_spi(Private) @objc @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@objcMembers public class SentryMXManager : ObjectiveC.NSObject, MetricKit.MXMetricManagerSubscriber {
  @_spi(Private) @objc public init(disableCrashDiagnostics: Swift.Bool = true)
  @_spi(Private) @objc weak public var delegate: (any SentryWithoutUIKit.SentryMXManagerDelegate)?
  @_spi(Private) @objc public func receiveReports()
  @_spi(Private) @objc public func pauseReports()
  @_spi(Private) @objc public func didReceive(_ payloads: [MetricKit.MXDiagnosticPayload])
  @_spi(Private) @objc deinit
}
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class PlaceholderSentryApplication : ObjectiveC.NSObject {
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc extension AppKit.NSApplication : SentryWithoutUIKit.SentryApplication {
  @_spi(Private) @_Concurrency.MainActor(unsafe) @objc dynamic public var mainThread_isActive: Swift.Bool {
    @_spi(Private) @objc get
  }
}
@_spi(Private) @objc @_hasMissingDesignatedInitializers @objcMembers public class SentryMXCallStackTree : ObjectiveC.NSObject, Swift.Codable {
  @_spi(Private) @objc final public let callStacks: [SentryWithoutUIKit.SentryMXCallStack]
  @_spi(Private) @objc final public let callStackPerThread: Swift.Bool
  @_spi(Private) @objc deinit
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) required public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @objc @_hasMissingDesignatedInitializers @objcMembers public class SentryMXCallStack : ObjectiveC.NSObject, Swift.Codable {
  @_spi(Private) public var threadAttributed: Swift.Bool?
  @_spi(Private) @objc public var callStackRootFrames: [SentryWithoutUIKit.SentryMXFrame]
  @_spi(Private) @objc public var flattenedRootFrames: [SentryWithoutUIKit.SentryMXFrame] {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc deinit
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) required public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @objc @_hasMissingDesignatedInitializers @objcMembers public class SentryMXFrame : ObjectiveC.NSObject, Swift.Codable {
  @_spi(Private) @objc public var binaryUUID: Foundation.UUID
  @_spi(Private) @objc public var offsetIntoBinaryTextSegment: Swift.Int
  @_spi(Private) @objc public var binaryName: Swift.String?
  @_spi(Private) @objc public var address: Swift.UInt64
  @_spi(Private) @objc public var subFrames: [SentryWithoutUIKit.SentryMXFrame]?
  @_spi(Private) public var sampleCount: Swift.Int?
  @_spi(Private) @objc deinit
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) required public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @objc public enum SentrySessionStatus : Swift.UInt {
  @_spi(Private) case ok = 0
  @_spi(Private) case exited = 1
  @_spi(Private) case crashed = 2
  @_spi(Private) case abnormal = 3
  @_spi(Private) public init?(rawValue: Swift.UInt)
  @_spi(Private) public typealias RawValue = Swift.UInt
  @_spi(Private) public var rawValue: Swift.UInt {
    @_spi(Private) get
  }
}
@_spi(Private) @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class SentrySession : ObjectiveC.NSObject, Foundation.NSCopying {
  @_spi(Private) @objc public init(releaseName: Swift.String, distinctId: Swift.String)
  @_spi(Private) @objc(initWithJSONObject:) public init?(jsonObject: [Swift.String : Any])
  @_spi(Private) @objc(endSessionExitedWithTimestamp:) public func endExited(withTimestamp timestamp: Foundation.Date)
  @_spi(Private) @objc(endSessionCrashedWithTimestamp:) public func endCrashed(withTimestamp timestamp: Foundation.Date)
  @_spi(Private) @objc(endSessionAbnormalWithTimestamp:) public func endAbnormal(withTimestamp timestamp: Foundation.Date)
  @_spi(Private) @objc public func incrementErrors()
  @_spi(Private) @objc public var sessionId: Foundation.UUID {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var started: Foundation.Date {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var status: SentryWithoutUIKit.SentrySessionStatus {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var errors: Swift.UInt {
    @_spi(Private) @objc get
    @_spi(Private) @objc set
  }
  @_spi(Private) @objc public var sequence: Swift.UInt {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var distinctId: Swift.String {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var flagInit: Foundation.NSNumber? {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var timestamp: Foundation.Date? {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var duration: Foundation.NSNumber? {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var releaseName: Swift.String? {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var environment: Swift.String? {
    @_spi(Private) @objc get
    @_spi(Private) @objc set
  }
  @_spi(Private) @objc public var user: SentryWithoutUIKit.User? {
    @_spi(Private) @objc get
    @_spi(Private) @objc set
  }
  @_spi(Private) @objc public var abnormalMechanism: Swift.String? {
    @_spi(Private) @objc get
    @_spi(Private) @objc set
  }
  @_spi(Private) @objc public func serialize() -> [Swift.String : Any]
  @_spi(Private) @objc public func setFlagInit()
  @_spi(Private) @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @_spi(Private) @objc deinit
}
@objc public enum SentryTransactionNameSource : Swift.Int {
  @objc(kSentryTransactionNameSourceCustom) case custom = 0
  @objc(kSentryTransactionNameSourceUrl) case url
  @objc(kSentryTransactionNameSourceRoute) case route
  @objc(kSentryTransactionNameSourceView) case view
  @objc(kSentryTransactionNameSourceComponent) case component
  @objc(kSentryTransactionNameSourceTask) case sourceTask
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_spi(Private) @_inheritsConvenienceInitializers @objc public class SwiftDescriptor : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func getObjectClassName(_ object: Swift.AnyObject) -> Swift.String
  @_spi(Private) @objc public static func getSwiftErrorDescription(_ error: any Swift.Error) -> Swift.String?
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @_inheritsConvenienceInitializers @objc public class SentrySDKLog : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func log(message: Swift.String, andLevel level: SentryWithoutUIKit.SentryLevel)
  @_spi(Private) @objc public static func willLog(atLevel level: SentryWithoutUIKit.SentryLevel) -> Swift.Bool
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@objc public protocol SentryRedactOptions {
  @objc var maskAllText: Swift.Bool { get }
  @objc var maskAllImages: Swift.Bool { get }
  @objc var maskedViewClasses: [Swift.AnyClass] { get }
  @objc var unmaskedViewClasses: [Swift.AnyClass] { get }
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers final public class SentryRedactDefaultOptions : ObjectiveC.NSObject, SentryWithoutUIKit.SentryRedactOptions {
  @_spi(Private) @objc final public var maskAllText: Swift.Bool
  @_spi(Private) @objc final public var maskAllImages: Swift.Bool
  @_spi(Private) @objc final public var maskedViewClasses: [Swift.AnyClass]
  @_spi(Private) @objc final public var unmaskedViewClasses: [Swift.AnyClass]
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@objc public enum SentryLevel : Swift.UInt {
  @objc(kSentryLevelNone) case none = 0
  @objc(kSentryLevelDebug) case debug = 1
  @objc(kSentryLevelInfo) case info = 2
  @objc(kSentryLevelWarning) case warning = 3
  @objc(kSentryLevelError) case error = 4
  @objc(kSentryLevelFatal) case fatal = 5
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
extension SentryWithoutUIKit.SentryLevel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers public class SentryLevelHelper : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func nameForLevel(_ level: SentryWithoutUIKit.SentryLevel) -> Swift.String
  @_spi(Private) @objc public static func levelForName(_ name: Swift.String?) -> SentryWithoutUIKit.SentryLevel
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers public class URLSessionTaskHelper : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func getGraphQLOperationName(from task: Foundation.URLSessionTask?) -> Swift.String?
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers public class SentryBaggageSerialization : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func encodeDictionary(_ dictionary: [Swift.String : Swift.String]) -> Swift.String
  @_spi(Private) @objc public static func decode(_ baggage: Swift.String) -> [Swift.String : Swift.String]
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @objcMembers public class SentryFileContents : ObjectiveC.NSObject {
  @_spi(Private) @objc final public let path: Swift.String
  @_spi(Private) @objc final public let contents: Foundation.Data
  @_spi(Private) @objc public init(path: Swift.String, contents: Foundation.Data)
  @_spi(Private) @objc deinit
}
@objc public protocol SentryUIViewControllerDescriptor : ObjectiveC.NSObjectProtocol {
  @objc var sentryName: Swift.String { get }
}
@_spi(Private) @objc public enum SentryANRType : Swift.Int {
  @_spi(Private) case fatalFullyBlocking
  @_spi(Private) case fatalNonFullyBlocking
  @_spi(Private) case fullyBlocking
  @_spi(Private) case nonFullyBlocking
  @_spi(Private) case unknown
  @_spi(Private) public init?(rawValue: Swift.Int)
  @_spi(Private) public typealias RawValue = Swift.Int
  @_spi(Private) public var rawValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @_inheritsConvenienceInitializers @objc public class SentryAppHangTypeMapper : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func getExceptionType(anrType: SentryWithoutUIKit.SentryANRType) -> Swift.String
  @_spi(Private) @objc public static func getFatalExceptionType(nonFatalErrorType: Swift.String) -> Swift.String
  @_spi(Private) @objc public static func isExceptionTypeAppHang(exceptionType: Swift.String) -> Swift.Bool
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @objcMembers public class SentryDispatchSourceWrapper : ObjectiveC.NSObject {
  @_spi(Private) @objc public init(interval: Swift.Int, leeway: Swift.Int, queue queueWrapper: SentryWithoutUIKit.SentryDispatchQueueWrapper, eventHandler: @escaping () -> Swift.Void)
  @_spi(Private) @objc public func cancel()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @objcMembers public class SentryAppState : ObjectiveC.NSObject, SentryWithoutUIKit.SentrySerializable {
  @_spi(Private) @objc public var releaseName: Swift.String? {
    get
  }
  @_spi(Private) @objc public var osVersion: Swift.String {
    get
  }
  @_spi(Private) @objc public var vendorId: Swift.String {
    get
  }
  @_spi(Private) @objc public var isDebugging: Swift.Bool {
    get
  }
  @_spi(Private) @objc public var systemBootTimestamp: Foundation.Date {
    get
  }
  @_spi(Private) @objc public var isActive: Swift.Bool
  @_spi(Private) @objc public var wasTerminated: Swift.Bool
  @_spi(Private) @objc public var isANROngoing: Swift.Bool
  @_spi(Private) @objc public var isSDKRunning: Swift.Bool
  @_spi(Private) @objc public init(releaseName: Swift.String?, osVersion: Swift.String, vendorId: Swift.String, isDebugging: Swift.Bool, systemBootTimestamp: Foundation.Date)
  @_spi(Private) @objc(initWithJSONObject:) public init?(jsonObject: [Swift.String : Any])
  @_spi(Private) @objc public func serialize() -> [Swift.String : Any]
  @_spi(Private) @objc deinit
}
extension Swift.FixedWidthInteger {
  @discardableResult
  @inlinable postfix internal static func ++ (lhs: inout Self) -> Self {
        defer { lhs += 1 }
        return lhs
    }
}
@_spi(Private) @objc public protocol SentrySessionReplayEnvironmentCheckerProvider {
  @_spi(Private) @objc func isReliable() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SentryExperimentalOptions : ObjectiveC.NSObject {
  @objc public var enableDataSwizzling: Swift.Bool
  @objc public var enableFileManagerSwizzling: Swift.Bool
  @objc public var enableUnhandledCPPExceptionsV2: Swift.Bool
  @objc public var enableSessionReplayInUnreliableEnvironment: Swift.Bool
  @objc public var enableLogs: Swift.Bool
  @_spi(Private) @objc public func validateOptions(_ options: [Swift.String : Any]?)
  @objc override dynamic public init()
  @objc deinit
}
@objc extension SentryWithoutUIKit.Options {
  @objc dynamic open var experimental: SentryWithoutUIKit.SentryExperimentalOptions {
    @objc get
  }
}
@_spi(Private) @objc @objcMembers public class UrlSanitized : ObjectiveC.NSObject {
  @_spi(Private) @objc public var query: Swift.String? {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var queryItems: [Foundation.URLQueryItem]? {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var fragment: Swift.String? {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public init(URL url: Foundation.URL)
  @_spi(Private) @objc public var sanitizedUrl: Swift.String? {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers public class SentrySwizzleClassNameExclude : ObjectiveC.NSObject {
  @_spi(Private) @objc public static func shouldExcludeClass(className: Swift.String, swizzleClassNameExcludes: Swift.Set<Swift.String>) -> Swift.Bool
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @_inheritsConvenienceInitializers @objc public class SentryNSTimerFactory : ObjectiveC.NSObject {
  @_spi(Private) @discardableResult
  @objc public func scheduledTimer(withTimeInterval interval: Foundation.TimeInterval, repeats: Swift.Bool, block: @escaping (Foundation.Timer) -> Swift.Void) -> Foundation.Timer
  @_spi(Private) @discardableResult
  @objc public func scheduledTimer(withTimeInterval ti: Foundation.TimeInterval, target aTarget: Any, selector aSelector: ObjectiveC.Selector, userInfo: Any?, repeats yesOrNo: Swift.Bool) -> Foundation.Timer
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @_inheritsConvenienceInitializers @objc(SentryDependencies) final public class Dependencies : ObjectiveC.NSObject {
  @_spi(Private) @objc public static let dispatchQueueWrapper: SentryWithoutUIKit.SentryDispatchQueueWrapper
  @_spi(Private) @objc public static let dateProvider: SentryWithoutUIKit.SentryDefaultCurrentDateProvider
  @_spi(Private) public static let objcRuntimeWrapper: SentryWithoutUIKit.SentryDefaultObjCRuntimeWrapper
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @objcMembers public class SentryWatchdogTerminationAttributesProcessor : ObjectiveC.NSObject {
  @_spi(Private) @objc public init(withDispatchQueueWrapper dispatchQueueWrapper: SentryWithoutUIKit.SentryDispatchQueueWrapper, scopePersistentStore: SentryWithoutUIKit.SentryScopePersistentStore)
  @_spi(Private) @objc public func clear()
  @_spi(Private) @objc public func setContext(_ context: [Swift.String : [Swift.String : Any]]?)
  @_spi(Private) @objc public func setUser(_ user: SentryWithoutUIKit.User?)
  @_spi(Private) @objc public func setDist(_ dist: Swift.String?)
  @_spi(Private) @objc public func setEnvironment(_ environment: Swift.String?)
  @_spi(Private) @objc public func setTags(_ tags: [Swift.String : Swift.String]?)
  @_spi(Private) @objc public func setExtras(_ extras: [Swift.String : Any]?)
  @_spi(Private) @objc public func setFingerprint(_ fingerprint: [Swift.String]?)
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc final public class SentryEnvelopeHeader : ObjectiveC.NSObject {
  @_spi(Private) @available(*, deprecated, message: "This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")
  @objc convenience public init(id eventId: SentryWithoutUIKit.SentryId?)
  @_spi(Private) @available(*, deprecated, message: "This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")
  @objc convenience public init(id eventId: SentryWithoutUIKit.SentryId?, traceContext: SentryWithoutUIKit.TraceContext?)
  @_spi(Private) @objc public init(id eventId: SentryWithoutUIKit.SentryId?, sdkInfo: SentryWithoutUIKit.SentrySdkInfo?, traceContext: SentryWithoutUIKit.TraceContext?)
  @_spi(Private) @available(*, deprecated, message: "This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")
  @objc public static func empty() -> Self
  @_spi(Private) @objc final public var eventId: SentryWithoutUIKit.SentryId?
  @_spi(Private) @objc final public var sdkInfo: SentryWithoutUIKit.SentrySdkInfo?
  @_spi(Private) @objc final public var traceContext: SentryWithoutUIKit.TraceContext?
  @_spi(Private) @objc final public var sentAt: Foundation.Date?
  @_spi(Private) @objc deinit
}
extension SentryWithoutUIKit.SentryRequest : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @objc public protocol SentryApplication {
  @_spi(Private) @objc var mainThread_isActive: Swift.Bool { get }
}
extension SentryWithoutUIKit.SentryNSError : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class SentryDefaultObjCRuntimeWrapper : ObjectiveC.NSObject, SentryWithoutUIKit.SentryObjCRuntimeWrapper {
  @_spi(Private) @objc final public func copyClassNamesForImage(_ image: Swift.UnsafePointer<Swift.CChar>, _ outCount: Swift.UnsafeMutablePointer<Swift.UInt32>?) -> Swift.UnsafeMutablePointer<Swift.UnsafePointer<Swift.CChar>>?
  @_spi(Private) @objc final public func classGetImageName(_ cls: Swift.AnyClass) -> Swift.UnsafePointer<Swift.CChar>?
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc public protocol SentryObjCRuntimeWrapper {
  @_spi(Private) @objc(copyClassNamesForImage:amount:) func copyClassNamesForImage(_ image: Swift.UnsafePointer<Swift.CChar>, _ outCount: Swift.UnsafeMutablePointer<Swift.UInt32>?) -> Swift.UnsafeMutablePointer<Swift.UnsafePointer<Swift.CChar>>?
  @_spi(Private) @objc(class_getImageName:) func classGetImageName(_ cls: Swift.AnyClass) -> Swift.UnsafePointer<Swift.CChar>?
}
@_spi(Private) @objc(SentryBinaryImageInfo) final public class SentryBinaryImageInfo : ObjectiveC.NSObject {
  @_spi(Private) @objc final public var name: Swift.String
  @_spi(Private) @objc final public var uuid: Swift.String?
  @_spi(Private) @objc final public var vmAddress: Swift.UInt64
  @_spi(Private) @objc final public var address: Swift.UInt64
  @_spi(Private) @objc final public var size: Swift.UInt64
  @_spi(Private) @objc public init(name: Swift.String, uuid: Swift.String?, vmAddress: Swift.UInt64, address: Swift.UInt64, size: Swift.UInt64)
  @_spi(Private) @objc deinit
}
@_spi(Private) @_inheritsConvenienceInitializers @objc(SentryBinaryImageCache) final public class SentryBinaryImageCache : ObjectiveC.NSObject {
  @_spi(Private) @objc final public var cache: [SentryWithoutUIKit.SentryBinaryImageInfo]? {
    get
  }
  @_spi(Private) @objc final public func start(_ isDebug: Swift.Bool)
  @_spi(Private) @objc final public func stop()
  @_spi(Private) @objc(binaryImageAdded:vmAddress:address:size:uuid:) final public func binaryImageAdded(imageName: Swift.UnsafePointer<Swift.CChar>?, vmAddress: Swift.UInt64, address: Swift.UInt64, size: Swift.UInt64, uuid: Swift.UnsafePointer<Swift.UInt8>?)
  @_spi(Private) @objc public static func convertUUID(_ value: Swift.UnsafePointer<Swift.UInt8>?) -> Swift.String?
  @_spi(Private) @objc final public func binaryImageRemoved(_ imageAddress: Swift.UInt64)
  @_spi(Private) @objc final public func imageByAddress(_ address: Swift.UInt64) -> SentryWithoutUIKit.SentryBinaryImageInfo?
  @_spi(Private) @objc(imagePathsForInAppInclude:) final public func imagePathsFor(inAppInclude: Swift.String) -> Swift.Set<Swift.String>
  @_spi(Private) @objc final public func getAllBinaryImages() -> [SentryWithoutUIKit.SentryBinaryImageInfo]
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @_hasMissingDesignatedInitializers @objcMembers public class SentryRRWebCustomEvent : SentryWithoutUIKit.SentryRRWebEvent {
  @_spi(Private) @objc deinit
}
@_spi(Private) public typealias SentryEventProcessor = (SentryWithoutUIKit.Event) -> SentryWithoutUIKit.Event?
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class SentryGlobalEventProcessor : ObjectiveC.NSObject {
  @_spi(Private) @objc(addEventProcessor:) final public func add(_ newProcessor: @escaping SentryWithoutUIKit.SentryEventProcessor)
  @_spi(Private) @discardableResult
  @objc final public func reportAll(_ event: SentryWithoutUIKit.Event) -> SentryWithoutUIKit.Event?
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
public enum SentryRedactRegionType : Swift.String, Swift.Codable {
  case redact
  case clipOut
  case clipBegin
  case clipEnd
  case redactSwiftUI
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_spi(Private) @_inheritsConvenienceInitializers @objc public class SentrySysctl : ObjectiveC.NSObject {
  @_spi(Private) @objc public var systemBootTimestamp: Foundation.Date {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var processStartTimestamp: Foundation.Date {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var runtimeInitSystemTimestamp: Swift.UInt64 {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var runtimeInitTimestamp: Foundation.Date {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var moduleInitializationTimestamp: Foundation.Date {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
extension SentryWithoutUIKit.SentryLog {
  @objc(SentryStructuredLogLevel) public enum Level : Swift.Int {
    case trace
    case debug
    case info
    case warn
    case error
    case fatal
    public init(value: Swift.String) throws
    public var value: Swift.String {
      get
    }
    public func toSeverityNumber() -> Swift.Int
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@_spi(Private) extension SentryWithoutUIKit.SentryLog.Level : Swift.Codable {
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(Private) extension SentryWithoutUIKit.SentryLog.Level {
  @_spi(Private) public func toSentryLevel() -> SentryWithoutUIKit.SentryLevel
}
extension SentryWithoutUIKit.SentryLog {
  @_hasMissingDesignatedInitializers @objc(SentryStructuredLogAttribute) @objcMembers final public class Attribute : ObjectiveC.NSObject {
    @objc final public let type: Swift.String
    @objc final public let value: Any
    @objc public init(string value: Swift.String)
    @objc public init(boolean value: Swift.Bool)
    @objc public init(integer value: Swift.Int)
    @objc public init(double value: Swift.Double)
    @objc public init(float value: Swift.Float)
    @objc deinit
  }
}
@_spi(Private) extension SentryWithoutUIKit.SentryLog.Attribute : Swift.Codable {
  @_spi(Private) convenience public init(from decoder: any Swift.Decoder) throws
  @_spi(Private) final public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(Private) @objc @objcMembers final public class SentryDiscardedEvent : ObjectiveC.NSObject, SentryWithoutUIKit.SentrySerializable {
  @_spi(Private) @objc final public let quantity: Swift.UInt
  @_spi(Private) @objc public init(reason: Swift.String, category: Swift.String, quantity: Swift.UInt)
  @_spi(Private) @objc final public func serialize() -> [Swift.String : Any]
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc public class SentryScopePersistentStore : ObjectiveC.NSObject {
  @_spi(Private) @objc public init?(fileManager: (any SentryWithoutUIKit.SentryFileManagerProtocol)?)
  @_spi(Private) @objc public func moveAllCurrentStateToPreviousState()
  @_spi(Private) @objc public func readPreviousContextFromDisk() -> [Swift.String : [Swift.String : Any]]?
  @_spi(Private) @objc public func readPreviousUserFromDisk() -> SentryWithoutUIKit.User?
  @_spi(Private) @objc public func readPreviousDistFromDisk() -> Swift.String?
  @_spi(Private) @objc public func readPreviousEnvironmentFromDisk() -> Swift.String?
  @_spi(Private) @objc public func readPreviousTagsFromDisk() -> [Swift.String : Swift.String]?
  @_spi(Private) @objc public func readPreviousExtrasFromDisk() -> [Swift.String : Any]?
  @_spi(Private) @objc public func readPreviousFingerprintFromDisk() -> [Swift.String]?
  @_spi(Private) @objc deinit
}
extension Foundation.Data {
  public init(contentsOfWithSentryTracing url: Foundation.URL, options: Foundation.Data.ReadingOptions = []) throws
  public func writeWithSentryTracing(to url: Foundation.URL, options: Foundation.Data.WritingOptions = []) throws
}
@_spi(Private) @objc @objcMembers public class SentryReplayEvent : SentryWithoutUIKit.Event {
  @_spi(Private) @objc final public let replayStartTimestamp: Foundation.Date
  @_spi(Private) @objc final public let replayType: SentryWithoutUIKit.SentryReplayType
  @_spi(Private) @objc final public let segmentId: Swift.Int
  @_spi(Private) @objc public var urls: [Swift.String]?
  @_spi(Private) @objc public init(eventId: SentryWithoutUIKit.SentryId, replayStartTimestamp: Foundation.Date, replayType: SentryWithoutUIKit.SentryReplayType, segmentId: Swift.Int)
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers final public class SentryEnvelopeItemTypes : ObjectiveC.NSObject {
  @_spi(Private) @objc public static let event: Swift.String
  @_spi(Private) @objc public static let session: Swift.String
  @_spi(Private) @objc public static let userFeedback: Swift.String
  @_spi(Private) @objc public static let feedback: Swift.String
  @_spi(Private) @objc public static let transaction: Swift.String
  @_spi(Private) @objc public static let attachment: Swift.String
  @_spi(Private) @objc public static let clientReport: Swift.String
  @_spi(Private) @objc public static let profile: Swift.String
  @_spi(Private) @objc public static let replayVideo: Swift.String
  @_spi(Private) @objc public static let statsd: Swift.String
  @_spi(Private) @objc public static let profileChunk: Swift.String
  @_spi(Private) @objc public static let log: Swift.String
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc public protocol SentryNSNotificationCenterWrapper {
  @_spi(Private) @objc func addObserver(_ observer: Any, selector aSelector: ObjectiveC.Selector, name aName: Foundation.NSNotification.Name?, object anObject: Any?)
  #if compiler(>=5.3) && $Sendable
  @_spi(Private) @objc(addObserverForName:object:queue:usingBlock:) func addObserver(forName name: Foundation.NSNotification.Name?, object obj: Any?, queue: Foundation.OperationQueue?, using block: @escaping @Sendable (Foundation.Notification) -> Swift.Void) -> any ObjectiveC.NSObjectProtocol
  #endif
  @_spi(Private) @objc func removeObserver(_ observer: Any, name aName: Foundation.NSNotification.Name?, object anObject: Any?)
  @_spi(Private) @objc(postNotification:) func post(_ notification: Foundation.Notification)
}
@_spi(Private) @objc extension Foundation.NotificationCenter : SentryWithoutUIKit.SentryNSNotificationCenterWrapper {
}
@_spi(Private) @_inheritsConvenienceInitializers @objc public class SentryMobileProvisionParser : ObjectiveC.NSObject {
  @_spi(Private) @objc public var mobileProvisionProfileProvisionsAllDevices: Swift.Bool {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc convenience override dynamic public init()
  @_spi(Private) public init(_ path: Swift.String?)
  @_spi(Private) @objc public func hasEmbeddedMobileProvisionProfile() -> Swift.Bool
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc final public class SentryEnvelopeItem : ObjectiveC.NSObject {
  @_spi(Private) @objc final public let header: SentryWithoutUIKit.SentryEnvelopeItemHeader
  @_spi(Private) @objc final public let data: Foundation.Data?
  @_spi(Private) @objc public init(header: SentryWithoutUIKit.SentryEnvelopeItemHeader, data: Foundation.Data?)
  @_spi(Private) @objc convenience public init(event: SentryWithoutUIKit.Event)
  @_spi(Private) @objc convenience public init(session: SentryWithoutUIKit.SentrySession)
  @_spi(Private) @available(*, deprecated, message: "Building the envelopes for the new SentryFeedback type is done directly in -[SentryClient captureFeedback:withScope:] so there will be no analog to this initializer for SentryFeedback at this time.")
  @objc convenience public init(userFeedback: SentryWithoutUIKit.UserFeedback)
  @_spi(Private) @objc convenience public init?(attachment: SentryWithoutUIKit.Attachment, maxAttachmentSize: Swift.UInt)
  @_spi(Private) @objc convenience public init(clientReport: SentryWithoutUIKit.SentryClientReport)
  @_spi(Private) @objc convenience public init?(replayEvent: SentryWithoutUIKit.SentryReplayEvent, replayRecording: SentryWithoutUIKit.SentryReplayRecording, video: Foundation.URL)
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers public class SentryEnabledFeaturesBuilder : ObjectiveC.NSObject {
  @_spi(Private) @objc @available(*, deprecated, message: "This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")
  public static func getEnabledFeatures(options: SentryWithoutUIKit.Options?) -> [Swift.String]
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc public protocol SentryReplayBreadcrumbConverter : ObjectiveC.NSObjectProtocol {
  @_spi(Private) @objc func convert(from breadcrumb: SentryWithoutUIKit.Breadcrumb) -> (any SentryWithoutUIKit.SentryRRWebEventProtocol)?
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers public class SentrySRDefaultBreadcrumbConverter : ObjectiveC.NSObject, SentryWithoutUIKit.SentryReplayBreadcrumbConverter {
  @_spi(Private) @objc public func convert(from breadcrumb: SentryWithoutUIKit.Breadcrumb) -> (any SentryWithoutUIKit.SentryRRWebEventProtocol)?
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc final public class SentryMeasurementValue : ObjectiveC.NSObject {
  @_spi(Private) @objc final public let value: Foundation.NSNumber
  @_spi(Private) @objc final public let unit: SentryWithoutUIKit.MeasurementUnit?
  @_spi(Private) @objc public init(value: Foundation.NSNumber)
  @_spi(Private) @objc public init(value: Foundation.NSNumber, unit: SentryWithoutUIKit.MeasurementUnit)
  @_spi(Private) @objc final public func serialize() -> [Swift.String : Any]
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @objcMembers public class SentryDispatchQueueWrapper : ObjectiveC.NSObject {
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc public init(name: Swift.UnsafePointer<Swift.CChar>, attributes: Dispatch.__OS_dispatch_queue_attr?)
  @_spi(Private) @objc public var queue: Dispatch.DispatchQueue {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc(dispatchAsyncWithBlock:) public func dispatchAsync(_ block: @escaping () -> Swift.Void)
  @_spi(Private) @objc(dispatchAsyncOnMainQueue:) public func dispatchAsyncOnMainQueue(block: @escaping () -> Swift.Void)
  @_spi(Private) @objc(dispatchSyncOnMainQueue:) public func dispatchSyncOnMainQueue(block: @escaping () -> Swift.Void)
  @_spi(Private) @objc public func dispatchSyncOnMainQueue(_ block: @escaping () -> Swift.Void, timeout: Swift.Double)
  @_spi(Private) @objc public func dispatch(after interval: Foundation.TimeInterval, block: @escaping () -> Swift.Void)
  @_spi(Private) @objc public func dispatchOnce(_ predicate: Swift.UnsafeMutablePointer<Swift.CLong>, block: @escaping () -> Swift.Void)
  @_spi(Private) public func dispatch(after interval: Foundation.TimeInterval, workItem: Dispatch.DispatchWorkItem)
  @_spi(Private) @objc public var shouldDispatchCancel: Swift.Bool {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc public var shouldCreateDispatchBlock: Swift.Bool {
    @_spi(Private) @objc get
  }
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc public protocol SentryRandomProtocol {
  @_spi(Private) @objc func nextNumber() -> Swift.Double
}
@_spi(Private) @_inheritsConvenienceInitializers @objc public class SentryRandom : ObjectiveC.NSObject, SentryWithoutUIKit.SentryRandomProtocol {
  @_spi(Private) @objc public func nextNumber() -> Swift.Double
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) @objc @objcMembers public class SentryLogBatcher : ObjectiveC.NSObject {
  @_spi(Private) @objc public init(client: SentryWithoutUIKit.SentryClient, flushTimeout: Foundation.TimeInterval, maxBufferSizeBytes: Swift.Int, dispatchQueue: SentryWithoutUIKit.SentryDispatchQueueWrapper)
  @_spi(Private) @objc convenience public init(client: SentryWithoutUIKit.SentryClient, dispatchQueue: SentryWithoutUIKit.SentryDispatchQueueWrapper)
  @_spi(Private) @objc deinit
}
extension SentryWithoutUIKit.DebugMeta : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension SentryWithoutUIKit.Exception : Swift.Decodable {
  required convenience public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @_inheritsConvenienceInitializers @objc final public class SentryMigrateSessionInit : ObjectiveC.NSObject {
  @_spi(Private) @discardableResult
  @objc(migrateSessionInit:envelopesDirPath:envelopeFilePaths:) public static func migrateSessionInit(envelope: SentryWithoutUIKit.SentryEnvelope?, envelopesDirPath: Swift.String, envelopeFilePaths: [Swift.String]) -> Swift.Bool
  @_spi(Private) @objc override dynamic public init()
  @_spi(Private) @objc deinit
}
@_spi(Private) extension SentryWithoutUIKit.SentryReplayType : Swift.Equatable {}
@_spi(Private) extension SentryWithoutUIKit.SentryReplayType : Swift.Hashable {}
@_spi(Private) extension SentryWithoutUIKit.SentryReplayType : Swift.RawRepresentable {}
extension SentryWithoutUIKit.SentryFeedback.SentryFeedbackSource : Swift.Equatable {}
extension SentryWithoutUIKit.SentryFeedback.SentryFeedbackSource : Swift.Hashable {}
extension SentryWithoutUIKit.SentryFeedback.SentryFeedbackSource : Swift.RawRepresentable {}
extension SentryWithoutUIKit.SentryReplayOptions.SentryReplayQuality : Swift.Equatable {}
extension SentryWithoutUIKit.SentryReplayOptions.SentryReplayQuality : Swift.Hashable {}
extension SentryWithoutUIKit.SentryReplayOptions.SentryReplayQuality : Swift.RawRepresentable {}
extension SentryWithoutUIKit.SentryProfileOptions.SentryProfileLifecycle : Swift.Equatable {}
extension SentryWithoutUIKit.SentryProfileOptions.SentryProfileLifecycle : Swift.Hashable {}
extension SentryWithoutUIKit.SentryProfileOptions.SentryProfileLifecycle : Swift.RawRepresentable {}
@_spi(Private) extension SentryWithoutUIKit.SentrySessionStatus : Swift.Equatable {}
@_spi(Private) extension SentryWithoutUIKit.SentrySessionStatus : Swift.Hashable {}
@_spi(Private) extension SentryWithoutUIKit.SentrySessionStatus : Swift.RawRepresentable {}
extension SentryWithoutUIKit.SentryTransactionNameSource : Swift.Equatable {}
extension SentryWithoutUIKit.SentryTransactionNameSource : Swift.Hashable {}
extension SentryWithoutUIKit.SentryTransactionNameSource : Swift.RawRepresentable {}
extension SentryWithoutUIKit.SentryLevel : Swift.Equatable {}
extension SentryWithoutUIKit.SentryLevel : Swift.Hashable {}
extension SentryWithoutUIKit.SentryLevel : Swift.RawRepresentable {}
@_spi(Private) extension SentryWithoutUIKit.SentryANRType : Swift.Equatable {}
@_spi(Private) extension SentryWithoutUIKit.SentryANRType : Swift.Hashable {}
@_spi(Private) extension SentryWithoutUIKit.SentryANRType : Swift.RawRepresentable {}
extension SentryWithoutUIKit.SentryRedactRegionType : Swift.Equatable {}
extension SentryWithoutUIKit.SentryRedactRegionType : Swift.Hashable {}
extension SentryWithoutUIKit.SentryRedactRegionType : Swift.RawRepresentable {}
extension SentryWithoutUIKit.SentryLog.Level : Swift.Equatable {}
extension SentryWithoutUIKit.SentryLog.Level : Swift.Hashable {}
extension SentryWithoutUIKit.SentryLog.Level : Swift.RawRepresentable {}
